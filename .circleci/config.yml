version: 2.1

# Setting up dependencies for use by the jobs in this project
orbs:
  docker: circleci/docker@1.5.0

executors:
  docker-executor:
    docker:
      - image: cimg/base:2020.01
    environment:
      IMAGE_NAME: jumal/superawesome-web-app

commands:
  load-cached-image:
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load archived Docker image
          command: docker load -i image.tar

# Define the jobs we want to run for this project
jobs:
  lint_dockerfile:
    executor: docker/machine
    steps:
      - checkout
      - docker/dockerlint:
          dockerfile: ./Dockerfile
          treat-warnings-as-errors: true
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:$CIRCLE_BRANCH .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME:$CIRCLE_BRANCH
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  test:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - load-cached-image
      - run:
          name: Run Tests
          command: |
            # replace with propert tests in future
            docker run -d --rm --name test-container -p 3000:3000 $IMAGE_NAME:$CIRCLE_BRANCH
            STATUS_CODE=$(docker exec test-container curl -s -o /dev/null -w '%{http_code}' localhost:3000)
            [ $STATUS_CODE = 200 ] || exit 100
  publish_image:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - load-cached-image
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:$CIRCLE_BRANCH
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              docker tag $IMAGE_NAME:$CIRCLE_BRANCH $IMAGE_NAME:latest
              docker push $IMAGE_NAME:latest
            fi
  deploy:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Set up aws cred
          command: |
            aws configure set aws_access_key_id "${CI_BOT_ACCESS_KEY}"
            aws configure set aws_secret_access_key "${CI_BOT_AWS_SECRET}"
            aws configure set default.region "eu-west-1"
      - run:
          name: Install Terraform
          command: |
            git clone https://github.com/tfutils/tfenv.git ~/.tfenv
            echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> ~/.bash_profile
            mkdir -p ~/.local/bin/
            . ~/.profile
            ln -s ~/.tfenv/bin/* ~/.local/bin
            cd deploy
            tfenv install
            tfenv use
            terraform --version
      - run:
          name: Pull Web Task Template
          command: git clone --depth 1 git@github.com:jumal-ali/ecs-container-definitions.git deploy/ecs-container-definitions
      - run:
          name: Build Deployment
          command: |
            cd deploy
            terraform init
            terraform validate
      - run:
          name: pull last revision
          command: |
            cd deploy
            terraform import \
                --var-file dev.tfvars \
                --var "ecs-task-exec-role=$DEV_ECS_EXEC_TASK_ROLE" \
                aws_ecs_task_definition.web-app \
                $(aws ecs list-task-definitions \
                    --family-prefix="dev-web-app"  \
                    --status=Active \
                    --sort DESC \
                    --max-items=1| jq .taskDefinitionArns[0] -r )
      - run:
          name: prepare deploy with latest image tag
          command: |
            cd deploy
            terraform plan \
              -input=false \
              -out=tfplan \
              -no-color \
              -var-file dev.tfvars \
              --var "ecs-task-exec-role=$DEV_ECS_EXEC_TASK_ROLE" \
              --var container-tag=$CIRCLE_BRANCH
      - run:
          name: deploy
          command: |
            cd deploy
            terraform apply -input=false tfplan

# Orchestrate our job run sequence
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - lint_dockerfile
      - build:
          requires:
            - lint_dockerfile
      - test:
          requires:
            - build
      - publish_image:
          requires:
            - test
      - deploy:
          requires:
            - publish_image
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
