version: 2.1

# Setting up dependencies for use by the jobs in this project
orbs:
  docker: circleci/docker@1.5.0

executors:
  docker-executor:
    docker:
      - image: cimg/base:2020.01
    environment:
      IMAGE_NAME: jumal/superawesome-web-app
  alpine-executor:
    docker:
      - image: alpine:3.13.0
    environment:
      IMAGE_NAME: jumal/superawesome-web-app

commands:
  load-cached-image:
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load archived Docker image
          command: docker load -i image.tar

# Define the jobs we want to run for this project
jobs:
  lint_dockerfile:
    executor: docker/machine
    steps:
      - checkout
      - docker/dockerlint:
          dockerfile: ./Dockerfile
          treat-warnings-as-errors: true
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t "$IMAGE_NAME:$CIRCLE_BRANCH" .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar "$IMAGE_NAME:$CIRCLE_BRANCH"
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  test:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - load-cached-image
      - run:
          name: Run Tests
          command: |
            # replace with propert tests in future
            docker run -d --rm --name test-container -p 3000:3000 "$IMAGE_NAME:$CIRCLE_BRANCH"
            STATUS_CODE=$(docker exec test-container curl -s -o /dev/null -w '%{http_code}' localhost:3000)
            [ "$STATUS_CODE" = 200 ] || exit 100
  publish_image:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - load-cached-image
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push "$IMAGE_NAME:$CIRCLE_BRANCH"
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              docker tag "$IMAGE_NAME:$CIRCLE_BRANCH" "$IMAGE_NAME:latest"
              docker push "$IMAGE_NAME:latest"
            fi
  deploy:
    executor: alpine-executor
    steps:
      - setup_remote_docker
      - run:
          name: Install aws and jq
          command: |
            apk add jq aws-cli --no-cache
      - run:
          name: Set up aws cred
          command: |
            aws configure set aws_access_key_id "$CI_BOT_AWS_ACCESS_KEY"
            aws configure set aws_secret_access_key "$CI_BOT_AWS_SECRET_KEY"
            aws configure set default.region "$AWS_REGION"
      - run:
          name: build new task definition
          command: |
            # GRAB LAST ACTIVE TASK DEFINITION
            #   REPLACE THE IMAGE TAG 
            #   REMOVE UNWANTED ATTRIBUTES
            #   STORE NEW DEFINITION
            aws ecs describe-task-definition --task-definition "$TASK_NAME" | \
              jq '(.taskDefinition | (.containerDefinitions[] | select(.image | contains("'"$IMAGE_NAME"'")))).image = "'"$IMAGE_NAME"':'"$CIRCLE_BRANCH"'"' | \
              jq '.taskDefinition | del( .compatibilities, .requiresAttributes, .revision, .taskDefinitionArn, .status )' \
              > new-task-definition.json
      - run:
          name: register new task definition
          command: aws ecs register-task-definition --family "$TASK_NAME" --cli-input-json file://new-task-definition.json
      - run:
          name: update ecs service
          command: aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --task-definition "$TASK_NAME" --force-new-deployment --query "service.taskDefinition" --output text

# Orchestrate our job run sequence
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - lint_dockerfile
      - build:
          requires:
            - lint_dockerfile
      - test:
          requires:
            - build
      - publish_image:
          requires:
            - test
      - deploy:
          requires:
            - publish_image
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
